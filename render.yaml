services:
  - type: redis
    name: modern-web-app-redis
    ipAllowList: []
    plan: free

  - type: web
    name: modern-web-app-backend
    env: node
    rootDir: server
    buildCommand: |
      echo "=== Kiểm tra môi trường ==="
      echo "Node version:"
      node -v
      echo "NPM version:"
      npm -v
      echo "=== Cài đặt dependencies ==="
      npm install
    startCommand: npm start
    envVars:
      - key: NODE_ENV
        value: development
      - key: NODE_VERSION
        value: 18.20.0
      - key: CI
        value: false
      - key: PORT
        value: 3001
      - key: REDIS_URL
        fromService:
          type: redis
          name: modern-web-app-redis
          envVarKey: REDIS_URL
      - key: CORS_ORIGIN
        value: https://modern-web-app-frontend.onrender.com
    healthCheckPath: /api/health
    autoDeploy: true
    scaling:
      minInstances: 1
      maxInstances: 3
      targetMemoryPercent: 80
      targetCPUPercent: 80

  - type: web
    name: modern-web-app-frontend
    env: node
    rootDir: .
    buildCommand: |
      echo "=== Bắt đầu quá trình build ==="
      echo "1. Kiểm tra thư mục hiện tại:"
      pwd
      echo "2. Kiểm tra nội dung thư mục:"
      ls -la
      echo "3. Di chuyển vào thư mục client:"
      cd client
      echo "4. Kiểm tra package.json:"
      if [ -f "package.json" ]; then
        echo "package.json tồn tại"
      else
        echo "LỖI: Không tìm thấy package.json"
        exit 1
      fi
      echo "5. Cài đặt dependencies:"
      npm install
      echo "6. Build ứng dụng:"
      npm run build
      echo "=== Kết thúc quá trình build ==="
    startCommand: cd client && npx serve -s build
    envVars:
      - key: NODE_ENV
        value: development
      - key: NODE_VERSION
        value: 18.20.0
      - key: CI
        value: false
      - key: PORT
        value: 3000
      - key: REACT_APP_API_URL
        fromService:
          type: web
          name: modern-web-app-backend
          envVarKey: RENDER_EXTERNAL_URL
    healthCheckPath: /
    autoDeploy: true
    scaling:
      minInstances: 1
      maxInstances: 3
      targetMemoryPercent: 80
      targetCPUPercent: 80

  - type: web
    name: au-rewards-backend
    env: node
    region: singapore
    plan: standard
    buildCommand: cd server && npm install && npm run build
    startCommand: cd server && npm install -g pm2 && pm2 start ecosystem.config.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3001
      - key: REDIS_URL
        sync: false
      - key: DB_HOST
        sync: false
      - key: DB_USER
        sync: false
      - key: DB_PASSWORD
        sync: false
      - key: DB_NAME
        sync: false
    healthCheckPath: /api/health
    autoDeploy: true
    scaling:
      minInstances: 3
      maxInstances: 10
      targetMemoryPercent: 70
      targetCPUPercent: 70

  - type: web
    name: au-rewards-frontend
    env: node
    region: singapore
    plan: standard
    buildCommand: cd client && npm install && chmod +x node_modules/.bin/react-scripts && npx react-scripts build
    startCommand: cd client && npx serve -s build
    envVars:
      - key: REACT_APP_API_URL
        value: https://au-rewards-backend.onrender.com
    healthCheckPath: /
    autoDeploy: true
    scaling:
      minInstances: 2
      maxInstances: 5
      targetMemoryPercent: 70
      targetCPUPercent: 70 